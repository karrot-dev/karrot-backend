#!/usr/bin/env node

const find = require('find');
const { readFileSync, writeFileSync } = require('fs');
const mjml2html = require('mjml');
const path = require('path');
const BASEDIR = path.resolve(path.join(__dirname, '..'));
const chokidar = require('chokidar');
const ws = require('ws');
const http = require('http');
const KARROT_BASE = path.join(BASEDIR, 'karrot')

const websocketPort = 8001;

const listeners = [];

if (process.argv.indexOf('--watch') !== -1) {
  compileAll();
  console.log('watching for changes to mjml files in', KARROT_BASE);
  const mjmlWatcher = chokidar.watch(
    path.join(KARROT_BASE, '/**/*.mjml'),
    {
      persistent: true,
      ignoreInitial: true,
    },
  )

  for (const event of ["add", "change", "unlink"]) {
    // We could just compile the specific one but then would not handle when just partials change
    mjmlWatcher.on(event, () => compileAll())
  }

  const jinja2Watcher = chokidar.watch(
    path.join(KARROT_BASE, '/**/*.jinja2'),
    {
      persistent: true,
      ignoreInitial: true,
    },
  )


  for (const event of ["add", "change", "unlink"]) {
    jinja2Watcher.on(event, () => {
      listeners.forEach(fn => fn());
    })
  }

  console.log('websocket server listening on port', websocketPort);
  const server = new ws.Server({ port: websocketPort });
  server.on('connection', ws => {
    listeners.push(() => {
      if (ws.readyState === ws.OPEN) {
        ws.send('update')
      }
    });
    ws.on('close', () => {
      const idx = listeners.indexOf(ws);
      if (idx !== -1) listeners.splice(idx, 1);
    })
  });

} else {
  compileAll();
}

function compileAll () {
  find.file(/\/templates\/[^_][^\/]*\.mjml$/, KARROT_BASE , files => {
    files.forEach(compile);
  })
}

function compile (file) {
  try {
    const name = file.substring(BASEDIR.length + 1);
    const contents = readFileSync(file, 'utf8');
    const rendered = mjml2html(contents, {
      level: 'strict',
      filePath: file
    });
    const output = file.replace(/\.mjml$/, '.html.jinja2');
    console.log('converted', name, '->', '.html.jinja2');
    writeFileSync(output, rendered.html);
  } catch (err) {
    console.log(err);
  }
}

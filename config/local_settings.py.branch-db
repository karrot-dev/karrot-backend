# You can use this to have one database per git branch
# Useful if you work on many branches at the same time
# To use copy it to config/local_settings.py

import os
import subprocess
import re
import sys

from psycopg2 import connect

from config.options import get_options

options = get_options()

TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def run_sql(sql, fetchone=False):
    # don't use a "with" here, as it makes it use a transaction
    # and you can't create databases in transactions
    connection = connect(
        host=options['DATABASE_HOST'],
        port=options['DATABASE_PORT'],
        user=options['DATABASE_USER'],
        password=options['DATABASE_PASSWORD'],
    )
    try:
        connection.autocommit = True
        with connection.cursor() as cursor:
            cursor.execute(sql)
            if fetchone:
                return cursor.fetchone()
    finally:
        connection.close()


def run_command(*args: str) -> str:
    return subprocess.run(args, capture_output=True, check=True).stdout.decode("utf-8") .strip()


def ensure_db(db_name):
    if TESTING:
        db_name = f"test_{db_name}"

    exists = run_sql(f"SELECT 1 FROM pg_database WHERE datname = '{db_name}'", True)
    if not exists:
        run_sql(f"""
            CREATE DATABASE "{db_name}"
        """)


git_branch = run_command('git', 'branch', '--show-current')
branch_based_db_name = 'karrot__' + re.sub(r'[^A-Za-z0-9_]', '_', git_branch)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': branch_based_db_name,
        'USER': options['DATABASE_USER'],
        'PASSWORD': options['DATABASE_PASSWORD'],
        'HOST': options['DATABASE_HOST'],
        'PORT': options['DATABASE_PORT'],
    }
}

ensure_db(branch_based_db_name)

# Generated by Django 2.2.2 on 2019-06-18 14:25
from datetime import timedelta

from django.db import migrations
from django.utils.dateparse import parse_datetime
from django_enumfield import enum
from rest_framework import serializers

from karrot.pickups.serializers import DateTimeRangeField


class HistoryTypus(enum.Enum):
    GROUP_CREATE = 0
    GROUP_MODIFY = 1
    GROUP_JOIN = 2
    GROUP_LEAVE = 3
    STORE_CREATE = 4
    STORE_MODIFY = 5
    STORE_DELETE = 6
    PICKUP_CREATE = 7
    PICKUP_MODIFY = 8
    PICKUP_DELETE = 9
    SERIES_CREATE = 10
    SERIES_MODIFY = 11
    SERIES_DELETE = 12
    PICKUP_DONE = 13
    PICKUP_JOIN = 14
    PICKUP_LEAVE = 15
    PICKUP_MISSED = 16
    APPLICATION_DECLINED = 17
    MEMBER_BECAME_EDITOR = 18
    PICKUP_DISABLE = 19
    PICKUP_ENABLE = 20
    GROUP_LEAVE_INACTIVE = 21
    GROUP_CHANGE_PHOTO = 22
    GROUP_DELETE_PHOTO = 23
    MEMBER_REMOVED = 24


def migrate(apps, schema_editor):
    # TODO pause websocket updates!
    History = apps.get_model('history', 'History')

    # set foreign key to pickup date
    for h in History.objects.filter(typus__in=(
            HistoryTypus.PICKUP_JOIN,
            HistoryTypus.PICKUP_LEAVE,
    )):
        h.pickup_id = h.payload['id']
        h.save()

    for h in History.objects.filter(typus__in=(
            HistoryTypus.PICKUP_DONE,
            HistoryTypus.PICKUP_MISSED,
    )):
        h.pickup_id = h.payload['pickup_date']
        h.save()

    # rewrite old pickup date payload to default duration
    for h in History.objects.filter(typus__in=(
            HistoryTypus.PICKUP_JOIN,
            HistoryTypus.PICKUP_LEAVE,
    ), payload__date__0__isnull=True):
        date = parse_datetime(h.payload['date'])
        h.payload['date'] = [d.isoformat() for d in [date, date + timedelta(minutes=30)]]
        h.save()

    # always use pickup serializer for payload
    PickupDate = apps.get_model('pickups', 'PickupDate')

    class PickupDateSerializer(serializers.ModelSerializer):
        class Meta:
            model = PickupDate
            fields = [
                'id',
                'date',
                'series',
                'place',
                'max_collectors',
                'collectors',
                'description',
                'feedback_due',
                'feedback_given_by',
                'is_disabled',
                'has_duration',
                'is_done',
            ]

        collectors = serializers.SerializerMethodField()
        feedback_due = serializers.DateTimeField(read_only=True)

        date = DateTimeRangeField()

        def get_collectors(self, pickup):
            return [c.user_id for c in pickup.pickupdatecollector_set.all()]

    for h in History.objects.filter(typus__in=(
            HistoryTypus.PICKUP_DONE,
            HistoryTypus.PICKUP_MISSED,
    )):
        pickup = PickupDate.objects.get(id=h.payload['pickup_date'])
        h.payload = PickupDateSerializer(pickup).data
        h.save()


class Migration(migrations.Migration):

    dependencies = [
        ('history', '0007_auto_20190123_1628'),
    ]

    operations = [migrations.RunPython(migrate, migrations.RunPython.noop, elidable=True)]
